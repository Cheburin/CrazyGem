Texture2D diffuseTexture  : register( t0 );
Texture2D<float4> shadowTexture  : register( t1 );

Texture2D<float4> depth1  : register( t2 );

//SamplerState linearSampler : register( s0 );
SamplerState SampleTypeClamp : register( s0 );
SamplerState SampleTypeWrap : register( s1 );

/*
struct Targets
{
    float4 color: SV_Target0;

    float4 normal: SV_Target1;
};
*/
float4 MODEL_FRAG(
    float4 pos         : TEXCOORD1,
    float2 tex            : TEXCOORD2,
    float4 clip_pos       : SV_POSITION
):SV_TARGET
{ 
   float4 textureColor = diffuseTexture.Sample(SampleTypeWrap, tex);
   if(textureColor.a > 0.8f) 
     return float4(clip_pos.z,clip_pos.z,clip_pos.z,0);//pos.z/pos.w,pos.z/pos.w,pos.z/pos.w,1);//pos.z/pos.w,pos.z/pos.w,pos.z/pos.w,1);///colorMap.Sample( linearSampler, tex.xy); 
   else
     discard; 
   return float4(clip_pos.z,clip_pos.z,clip_pos.z,0);  
   //return float4(1.0,1.0,1.0,0);//pos.z/pos.w,pos.z/pos.w,pos.z/pos.w,1);//pos.z/pos.w,pos.z/pos.w,pos.z/pos.w,1);///colorMap.Sample( linearSampler, tex.xy);
   //return float4(clip_pos.z,clip_pos.z,clip_pos.z,1);///colorMap.Sample( linearSampler, tex.xy);
};

float4 MODEL_PRE_SHADOW(
    float3 normal         : TEXCOORD1,
    float2 tex            : TEXCOORD2,
	float4 L1       : TEXCOORD3,
	float4 L2       : TEXCOORD4,
     float3 P       : TEXCOORD5    
):SV_TARGET
{ 
    float4 diffuseColor = float4(1.0f, 1.0f, 1.0f, 1.0f);

    //float4 color = float4(0.15f, 0.15f, 0.15f, 1.0);
    
    //blur shadows
    //Set the default output color to be black (shadow).

    float bias = 0.001f;

    float3 lightPosition = float3(5.0f, 8.0f, -5.0f);

    float4 color = float4(0.0f, 0.0f, 0.0f, 1.0f);

    float3 lightDir = normalize(float3(0.707,0.707,0));//lightPosition - P);
    //float3 lightPos = normalize(lightPosition - P);

    L1.x =  (L1.x / L1.w) / 2.0f + 0.5f;
    L1.y = (-L1.y / L1.w) / 2.0f + 0.5f;
    
    // Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
    if((saturate(L1.x) == L1.x) && (saturate(L1.y) == L1.y))
    {
        // Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
        float depthValue = depth1.Sample(SampleTypeClamp, L1.xy).x;//depth1.Load(int3(L1.x*1024,L1.y*768,0)).x;

        // Calculate the depth of the light.
        float lightDepthValue = L1.z / L1.w;

        // Subtract the bias from the lightDepthValue.
        lightDepthValue = lightDepthValue - bias;

        // Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
        // If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
        if(saturate(lightDepthValue) < saturate(depthValue))//abs(lightDepthValue - depthValue)>0.0001)
        {
            float lightIntensity = saturate(dot(normalize( normal ), lightDir));

            if(lightIntensity > 0.0f)
            {
                // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
                color += saturate(diffuseColor * lightIntensity);

                color = saturate(color);
                //And if we determine a pixel is illuminated then it is colored pure white.
                ////color = float4(1.0f, 1.0f, 1.0f, 1.0f);                
            }
        }
    }

    /*
    lightPos = normalize(float3(-5.0f, 8.0f, -5.0f) - P);
    diffuseColor = float4(1.0f, 1.0f, 1.0f, 1.0f);

    L2.x =  L2.x / L2.w / 2.0f + 0.5f;
    L2.y = -L2.y / L2.w / 2.0f + 0.5f;

    // Determine if the projected coordinates are in the 0 to 1 range.  If so then this pixel is in the view of the light.
    if((saturate(L2.x) == L2.x) && (saturate(L2.y) == L2.y))
    {
        // Sample the shadow map depth value from the depth texture using the sampler at the projected texture coordinate location.
        float depthValue = depth2.Sample(SampleTypeClamp, L2.xy).r;//depth1.Load(int3(L1.x*1024,L1.y*768,0)).x;

        // Calculate the depth of the light.
        float lightDepthValue = L2.z / L2.w;

        // Subtract the bias from the lightDepthValue.
        lightDepthValue = lightDepthValue - bias;

        // Compare the depth of the shadow map value and the depth of the light to determine whether to shadow or to light this pixel.
        // If the light is in front of the object then light the pixel, if not then shadow this pixel since an object (occluder) is casting a shadow on it.
        if(lightDepthValue < depthValue)//abs(lightDepthValue - depthValue)>0.0001)
        {
            lightIntensity = saturate(dot(normalize( normal ), lightPos));
            if(lightIntensity > 0.0f)
            {
                // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
                color += (diffuseColor * lightIntensity);
            }
        }
    }

    color = saturate(color);

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 textureColor = colorMap.Sample(linearSampler, tex);

    // Combine the light and texture color.
    color = color * textureColor;
    */
    float4 textureColor = diffuseTexture.Sample(SampleTypeWrap, tex);

    color = color * textureColor;
    //This will return a black and white image of the shadowed scene so we can use it as input to the blurring shader.
    return color;
};

float4 MODEL_FRAG_SHADOW(
    float3 normal         : TEXCOORD1,
    float2 tex            : TEXCOORD2,
	float4 L1       : TEXCOORD3,
	float4 L2       : TEXCOORD4,
     float3 P       : TEXCOORD5,    
    float4 clip_pos       : SV_POSITION
):SV_TARGET{
    float4 ambientColor = float4(0.15f, 0.15f, 0.15f, 1.0f);
    float4 diffuseColor = float4(1.0f, 1.0f, 1.0f, 1.0f);
    float3 lightPosition = float3(5.0f, 8.0f, -5.0f);

    float4 color = ambientColor;
    float3 lightPos = normalize(lightPosition - P);

    // Calculate the amount of light on this pixel.
    float lightIntensity = saturate(dot(normal, lightPos));

    if(lightIntensity > 0.0f)
    {
        // Determine the light color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);

        // Saturate the light color.
        color = saturate(color);
    }

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 textureColor = diffuseTexture.Sample(SampleTypeWrap, tex);

    // Sample the shadow value from the shadow texture using the sampler at the projected texture coordinate location.
    float4 shadowValue = shadowTexture.Load(int3(clip_pos.xy,0)).r;

    // Combine the shadows with the final color.
    color = color * textureColor * shadowValue;

    return color;    
}

//////////////////
float2 EyeToTex(float3 eye)
{
    float2 g_FocalLen = float2(1,1);

    float2 win = g_FocalLen * eye.xy / eye.z;
    win.xy *= float2(0.5, -0.5);
    win.xy += float2(0.5, 0.5);
    return win;
}

float3 TexToEye(float2 texcoords, float eye_z)
{
    float2 g_FocalLen = float2(1,1);

    texcoords.xy -= float2(0.5, 0.5);
    texcoords.xy /= float2(0.5, -0.5);
    float2 eye_xy = (texcoords.xy / g_FocalLen) * eye_z;
    return float3(eye_xy, eye_z);
}
//////////////////
Texture2D<float4> projectedTexture  : register( t2 );
//////////////////

float4 MODEL_FRAG_WITH_TEXTURE(
    float3 normal         : TEXCOORD1,
    float2 tex            : TEXCOORD2,
	float4 L1       : TEXCOORD3,
	float4 L2       : TEXCOORD4,
     float3 P       : TEXCOORD5,    
    float4 clip_pos       : SV_POSITION
):SV_TARGET{
    float4 ambientColor = float4(0.15f, 0.15f, 0.15f, 1.0f);
    float4 diffuseColor = float4(1.0f, 1.0f, 1.0f, 1.0f);
    float3 lightPosition = float3(5.0f, 8.0f, -5.0f);

    float4 color = float4(0,0,0,0);//ambientColor;
    float3 lightPos = normalize(lightPosition - P);

    // Calculate the amount of light on this pixel.
    float lightIntensity = saturate(dot(normal, lightPos));

    if(lightIntensity > 0.0f)
    {
        // Determine the light color based on the diffuse color and the amount of light intensity.
        color += (diffuseColor * lightIntensity);

        // Saturate the light color.
        color = saturate(color);
    }

    // Sample the pixel color from the texture using the sampler at this texture coordinate location.
    float4 textureColor = diffuseTexture.Sample(SampleTypeWrap, tex);

    // Sample the shadow value from the shadow texture using the sampler at the projected texture coordinate location.
    float4 shadowValue = 1.0;//shadowTexture.Load(int3(clip_pos.xy,0)).r;

    // Combine the shadows with the final color.
    float2 projectTexCoord = EyeToTex(L1);
    
    float4 projectionColor = float4(1,1,1,1);
    
    // Determine if the projected coordinates are in the 0 to 1 range.  If it is then this pixel is inside the projected view port.
    if((saturate(projectTexCoord.x) == projectTexCoord.x) && (saturate(projectTexCoord.y) == projectTexCoord.y))
    {
       //Sample the projection texture using the projected texture coordinates and then set the output pixel color to be the projected texture color.

       // Sample the color value from the projection texture using the sampler at the projected texture coordinate location.
       
       projectionColor = projectedTexture.Sample(SampleTypeWrap, projectTexCoord);
       
       color = saturate((color * projectionColor * textureColor) + (ambientColor * textureColor));
    }
    else {
       color = ambientColor * textureColor;
    }

    //color = color * textureColor * shadowValue * projectionColor;

    return color;    
}